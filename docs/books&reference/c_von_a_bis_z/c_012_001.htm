<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Galileo Computing :: C von A bis Z – 12.2 Makros und Konstanten – #define</title>
<meta name="title" content="Galileo Computing :: C von A bis Z">
<meta name="author" content="J&uuml;rgen Wolf">
<meta name="publisher" content="Galileo Press 2006">
<meta name="copyright" content="Galileo Press 2006">
<meta name="description" content="C von A bis Z - Das umfassende Handbuch f&uuml;r Linux, Unix und Windows – 2., aktualisierte und erweiterte Auflage 2006, geb., mit CD und Referenzkarte – ISBN 3-89842-643-2">
<meta name="audience" content="Alle">
<meta name="robots" content="INDEX,FOLLOW">
<meta http-equiv="content-language" content="de">
<link rel="stylesheet" type="text/css" href="common/galileo_open.css">
<link rel="prev" href="c_012_000.htm">
<link rel="next" href="c_012_002.htm"><script type="text/javascript" language="JavaScript"><!--
function OpenWin(url,name,height,width)
{
  var InfoWin = window.open(url,name,"directories=0,height="+height+",width=" + width + ",hotkeys=0,location=0,menubar=0,resizable=1,screenX=150,screenY=10,left=150,top=10,scrollbars=1,status=1,titlebar=0,toolbar=0");
  InfoWin.focus();
}
//--></script></head>
<body vlink="#000099" link="#000099" alink="#000099">
    <table width="100%" height="74" border="0" cellpadding="0" cellspacing="0" bgcolor="#000066">
        <tr>
            <td height="74" valign="bottom" colspan="2"><a href="http://www.galileocomputing.de/katalog/openbook/?GPP=opc"><img src="common/galileocomputing_openbook.gif" width="200" height="56" border="0" alt="Galileo Computing < openbook >" title="Galileo Computing < openbook >"></a></td>
            <td width="80" height="74"><a href="http://www.galileocomputing.de/?GPP=opc"><img src="common/galileocomputing.gif" border="0" alt="Galileo Computing - Professionelle B&uuml;cher. Auch f&uuml;r Einsteiger." title="Galileo Computing - Professionelle B&uuml;cher. Auch f&uuml;r Einsteiger."></a></td>
        </tr>
    </table>
    <div align="right"><a href="http://www.galileocomputing.de/?GPP=opc" class="navnav">Professionelle B&uuml;cher. Auch f&uuml;r Einsteiger.</a></div>
    <br />
<table border="0" cellpadding="0" cellspacing="0" width="100%">
    <tr>
        <td width="156" valign="top">
    <table border="0" cellpadding="0" cellspacing="0" width="100%" align="left">
        <tr>
            <td colspan="2" class="nav1" align="left" valign="top" height="150">
                <table class="tbl1" width="150" border="0" cellpadding="3" cellspacing="0">
<tr>
<td class="tbl2" height="25"><a class="nav" href="./index.htm">Inhaltsverzeichnis</a></td>
</tr>
<tr>
<td><a class="navnav" href="./c_000Vorwort_000.htm#Xxx999266">Vorwort</a></td>
</tr>
<tr>
<td><a class="navnav" href="./c_000VorwortGutachter_000.htm#Xxx999275">Vorwort des Gutachters</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_001_000.htm#Xxx999328">1 Einstieg in C</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_002_000.htm#Xxx999328">2 Das erste Programm</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_003_000.htm#Xxx999328">3 Zeichens&auml;tze</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_004_000.htm#Xxx999329">4 Kommentare in C</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_005_000.htm#Xxx999330">5 Formatierte Eingabe mit scanf()</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_006_000.htm#Xxx999330">6 Formatierte Ausgabe mit printf</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_007_000.htm#Xxx999329">7 Elementare Datentypen</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_008_000.htm#Xxx999328">8 Operatoren</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_009_000.htm#Xxx999328">9 Typenumwandlung</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_010_000.htm#Xxx999328">10 Kontrollstrukturen</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_011_000.htm#Xxx999328">11 Funktionen</A></td>
</tr>
<tr>
<td><A class="navh" href="./c_012_000.htm#Xxx999328">12 Pr&auml;prozessor-Direktiven</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_013_000.htm#Xxx999328">13 Arrays</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_014_000.htm#Xxx999328">14 Zeiger (Pointer)</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_015_000.htm#Xxx999328">15 Kommandozeilenargumente</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_016_000.htm#Xxx999328">16 Dynamische Speicherverwaltung</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_017_000.htm#Xxx999328">17 Strukturen</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_018_000.htm#Xxx999328">18 Ein-/Ausgabe-Funktionen</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_019_000.htm#Xxx999328">19 Attribute von Dateien und Arbeiten mit Verzeichnissen (nicht ANSI C)</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_020_000.htm#Xxx999328">20 Arbeiten mit variablen langen Argumentlisten – &lt;stdarg.h&gt;</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_021_000.htm#Xxx999328">21 Zeitroutinen</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_022_000.htm#Xxx999328">22 Weitere Headerdateien und ihre Funktionen (ANSI C)</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_023_000.htm#Xxx999328">23 Dynamische Datenstrukturen</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_024_000.htm#Xxx999328">24 Algorithmen</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_025_000.htm#Xxx999328">25 Sicheres Programmieren</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_026_000.htm#Xxx999328">26 CGI mit C</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_027_000.htm#Xxx999328">27 MySQL und C</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_028_000.htm#Xxx999328">28 Netzwerkprogrammierung und Cross-Plattform-Entwicklung</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_029_000.htm#Xxx999328">29 Wie geht’s jetzt weiter?</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_030Anhang_000.htm#Xxx999266">A Anhang</A></td>
</tr>
<tr>
<td><a class="navnav" href="./stichwort.htm#Xxx512322">Index</a></td>
</tr>
<tr><td><br /><a class="navnav" href="http://download.galileo-press.de/openbook/c_von_a_bis_z/galileocomputing_c_von_a_bis_z.zip"><strong>Download:</strong><br />- ZIP, ca. 8,5 MB</a></td></tr>
<tr><td><a class="navnav" href="http://www.galileocomputing.de/899?GPP=opc">Buch bestellen</a></td></tr>
<tr><td><a class="navnav" href="mailto:stefan.krumbiegel@galileo-press.de?subject=Meinung%20zu%20C%20von%20A%20bis%20Z%20(openbook)">Ihre Meinung?</a><br /><br /></td></tr>
</table></td>
</tr>
</table>
</td>
<td width="10"><img src="common/spacer10.gif" width="10" height="10"></td>
<td width="85%" valign="top" align="center">
    <div align="center">
        <table width="98%" border="0" cellspacing="0" cellpadding="0" bgcolor="#FFFFFF">
            <tr>
                <td width="100%" class="start" colspan="1" height="22" align="center">
                    <table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a class="navnav" href="c_012_000.htm"> &lt;&lt; zur&uuml;ck</a></td>
<td width="49%">
<div align="center"><a href="http://www.galileocomputing.de/?GPP=opc" class="navnav">Galileo Computing /</a><a class="navnav" href="http://www.galileocomputing.de/katalog/openbook/?GPP=opc"> &lt;openbook&gt; /</a><a href="./index.htm" class="navnav"> C von A bis Z</a></div>
</td>
<td align="right" width="25%">
<div align="right"><a class="navnav" href="c_012_002.htm">vor &gt;&gt; </a></div>
</td>
</tr>
</table>
</td>
</tr>
<tr>
<td width="100%" valign="top">
    <table width="100%" border="0" cellpadding="10" cellspacing="0" class="box">
        <tr>
            <td colspan="2"><a href="http://www.galileocomputing.de/899?GPP=opc" class="buchtitel">C von A bis Z</a><span class="autor"> von J&uuml;rgen Wolf</span><br><span class="untertitel">Das umfassende Handbuch f&uuml;r Linux, Unix und Windows <br />– 2., aktualisierte und erweiterte Auflage 2006</span></td>
        </tr>
        <tr>
            <td valign="top" width="90"><a href="http://www.galileocomputing.de/899?GPP=opc"><img src="common/643.gif" border="0" alt="Buch: C von A bis Z" title="Buch: C von A bis Z" align="left"><br /><br /><span class="autor"><strong>C von A bis Z</strong><br />1.116 S., mit CD, Referenzkarte, 39,90 Euro<br />Galileo Computing<br />ISBN 3-89842-643-2</span></a></a></td>
            <td width="80%">
<table border="0">
<tr>
<td valign="baseline"><img src="common/pfeil_u.gif" width="10" height="10" border="0" alt="gp"></td>
<td valign="baseline" colspan="3" class="kap"><b>Kapitel <a href="./c_012_000.htm#RxxobKap012000040027E01F01618C">12 Pr&auml;prozessor-Direktiven</a></b></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="gp"></td>
<td valign="baseline" colspan="2"><b><a href="./c_012_000.htm#RxxobKap012000040027E01F01619C">12.1 Einkopieren von Dateien mittels #include</a></b></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="gp"></td>
<td valign="baseline" colspan="2"><b><a class="navh" href="#RxxobKap012001040027FB1F02718C">12.2 Makros und Konstanten – #define</a></b></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="gp"></td>
<td valign="baseline"><b><a class="navh" href="#RxxobKap012001040027FB1F027190">12.2.1 Symbolische Konstanten mit #define</a></b></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="gp"></td>
<td valign="baseline"><b><a class="navh" href="#RxxobKap012001040027FB1F0271AD">12.2.2 Makros mit #define</a></b></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="gp"></td>
<td valign="baseline" colspan="2"><b><a href="./c_012_002.htm#RxxobKap012002040027FC1F02718C">12.3 Bedingte Kompilierung</a></b></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="gp"></td>
<td valign="baseline" colspan="2"><b><a href="./c_012_003.htm#RxxobKap012003040027FD1F02018C">12.4 Vordefinierte Pr&auml;prozessor-Direktiven (ANSI C)</a></b></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="gp"></td>
<td valign="baseline" colspan="2"><b><a href="./c_012_004.htm#RxxobKap012004040027FE1F01318C">12.5 Ersetzung eines Makroparameters durch einen String</a></b></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="gp"></td>
<td valign="baseline" colspan="2"><b><a href="./c_012_005.htm#RxxobKap012005040027FF1F02B18C">12.6 #undef – Makronamen wieder aufheben</a></b></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="gp"></td>
<td valign="baseline" colspan="2"><b><a href="./c_012_006.htm#RxxobKap012006040028001F02418C">12.7 Ausgeben von Fehlermeldungen – #error</a></b></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="gp"></td>
<td valign="baseline" colspan="2"><b><a href="./c_012_007.htm#RxxobKap012007040028011F04518C">12.8 #pragma</a></b></td>
</tr>
</table><br></td>
</tr>
</table>
<table width="100%" cellpadding="20" cellspacing="0" border="0" bgcolor="#eeeeee">
<tr>
<td>
<a name="t21"></a><a name="t2t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang" title="Galileo Computing - Zum Seitenanfang"></a></div>
<h2 class="t2">12.2 Makros und Konstanten – #define<a id="RxxobKap012001040027FB1F02718C" name="RxxobKap012001040027FB1F02718C"></a> 
      <a href="#t2t32"><img src="common/down.gif" width="15" height="15" border="0" alt="down"></a><img src="common/15x15leer.gif" width="15" height="15" border="0" alt="top"></h2>
<p><a id="Xxx999329" name="Xxx999329"></a><a id="Xxx999330" name="Xxx999330"></a>Mit <span class="listing">#define</span> ist es m&ouml;glich, Zeichenketten anzugeben, die vor der &Uuml;bersetzung des Programms gegen eine andere Zeichenkette ausgetauscht werden. Sie erinnern sich sicherlich aus dem vorangegangenen Kapitel daran, wie ein Programm &uuml;bersetzt wird. Auch hier wird durch das Zeichen <span class="listing">#</span> bewirkt, dass der Pr&auml;prozessor zuerst seine Arbeit verrichtet, bevor das werdende Programm vom Compiler in Assembler und dann in Maschinensprache &uuml;bersetzt wird. Hierzu die Syntax der <span class="listing">define</span>-Direktive:</p>
<pre>#define Bezeichner    Ersatzbezeichner
#define Bezeichner(Bezeichner_Liste)    Ersatzbezeichner</pre>
<p>Bei der ersten Syntaxbeschreibung wird eine symbolische Konstante und im zweiten Fall ein Makro definiert.</p>
<a name="t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang" title="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t32"></a><h3 class="t3">12.2.1 Symbolische Konstanten mit #define<a id="RxxobKap012001040027FB1F027190" name="RxxobKap012001040027FB1F027190"></a> 
      <a href="#t2t33"><img src="common/down.gif" width="15" height="15" border="0" alt="down"></a><a href="#t2t31"><img src="common/top.gif" width="15" height="15" border="0" alt="top"></a></h3>
<p><a id="Xxx999335" name="Xxx999335"></a>Ein erstes Programmbeispiel, welches eine symbolische Konstante definiert:</p>
<pre>/* define1.c */
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#define EINS 1
int main(void) {
   printf("%d\n",EINS);
   return EXIT_SUCCESS;
}</pre>
<p>Im Programm wird jede symbolische Konstante <span class="listing">EINS</span> mit dem Wert 1 definiert. Wenn Sie das Programm &uuml;bersetzen, werden vor der Kompilierung alle Namen mit <span class="listing">EINS</span> im Quelltext vom Pr&auml;prozessor durch den Wert 1 ersetzt. Die Konstante <span class="listing">EINS</span> m&uuml;ssen Sie nicht wie im Beispiel ausdr&uuml;cklich in gro&szlig;en Buchstaben schreiben. Dies dient nur der besseren &Uuml;bersicht. Aber Achtung, Folgendes funktioniert nicht:</p>
<pre>printf("EINS");</pre>
<p>In diesem Fall wird tats&auml;chlich der String <span class="listing">"EINS"</span> auf dem Bildschirm ausgegeben und nicht der Wert 1. Das bedeutet, hier wird die Konstante <span class="listing">EINS</span> nicht durch 1 ersetzt.</p>
<br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext" bgcolor="#000000">
<p class="BStandard"><b>Merke   </b>Beachten Sie, dass <span class="listing">#define</span>-Makros Konstanten sind. Einmal festgelegte Konstanten k&ouml;nnen zur Laufzeit des Programms nicht mehr ge&auml;ndert werden.</p>
</td>
</tr>
</table><br>
<p>Welchen Vorteil haben solche Defines? Das soll das folgende Programm demonstrieren:</p>
<pre>/* kreisber.c */
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
/*  Bei Linux muss f&uuml;r math.h der Compilerflag -lm
 *  mit angegeben werden:
 *  gcc -o synkonst2 symkonst2.c -lm
 */
#include &lt;math.h&gt;
#define PI 3.1415926f
/*  Programm zur Berechnung von Kreisfl&auml;che(A), Durchmesser(d)
 *  und Umfang(U) und Durchmesser aus Umfang */
void kreisflaeche(void) {
   float A,d;
   printf("Durchmesser des Kreises eingeben: ");
   scanf("%f", &amp;d);
   A = d*d*PI / 4;
   printf("Die Kreisfl&auml;che betr&auml;gt  %f\n", A);
}
void durchmesser(void) {
   float A, d;
   printf("Kreisfl&auml;che des Kreises eingeben: ");
   scanf("%f", &amp;A);
   d =(float) sqrt((double)4*A/PI);
   printf("Der Duchmesser des Kreises ist %f\n", d);
}
void kreisumfang(void) {
   float U, d;
   printf("Durchmesser des Kreises eingeben: ");
   scanf("%f", &amp;d);
   U = d * PI;
   printf("Der Umfang des Kreises betr&auml;gt %f\n", U);
}
void d2umfang(void) {
   float U,d;
   printf("Umfang des Kreises eingeben: ");
   scanf("%f",&amp;U);
   d = U/PI;
   printf("Der Durchmesser des Kreises betr&auml;gt %f\n", d);
}
int main(void) {
   kreisflaeche();
   durchmesser();
   kreisumfang();
   d2umfang();
   return EXIT_SUCCESS;
}</pre>
<p>In diesem Programm werden einfache Berechnungen von kreisf&ouml;rmigen Fl&auml;chen durchgef&uuml;hrt. Statt <span class="listing">PI</span> an jeder Stelle im Programm erneut festzulegen, ist hier die textliche Ersetzung mittels <span class="listing">define</span> besser geeignet. Dadurch wird auch garantiert, dass stets der gleiche Wert &uuml;berall im Programm verwendet wird. Sollten Sie z.B. eine genauere Angabe von <span class="listing">PI</span> ben&ouml;tigen, so m&uuml;ssen Sie nur die symbolische Konstante &auml;ndern.</p>
<p>Einen weiteren Vorteil bietet z.B. die Verwendung bestimmter Konstanten, etwa einer Landesw&auml;hrung. Falls eine &Auml;nderung erforderlich wird, kann diese ohne viel Aufwand f&uuml;r das gesamte Programm an einer zentralen Stelle vorgenommen werden. Sie k&ouml;nnen bei Makrodefinitionen auch auf fr&uuml;her definierte Namen zur&uuml;ckgreifen, wie im folgenden Beispiel:</p>
<pre>#define PI 3.141592653
#define PI_2 PI*2</pre>
<p>Hier wird zuerst <span class="listing">PI</span> definiert und in der n&auml;chsten Zeile der Wert von <span class="listing">PI*2</span>, der textlich durch <span class="listing">PI_2</span> ersetzt wird.</p>
<br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext" bgcolor="#000000">
<p class="BStandard"><b>Tipp   </b>Verzichten Sie bei textlichen Ersetzungen auf &uuml;berfl&uuml;ssige Berechnungen. So f&uuml;hrt zum Beispiel ein Define der Art <span class="listing">#define</span> <span class="listing">PI</span> <span class="listing">atan(1)*4</span> dazu, dass dieser Wert im Programm jedes Mal erneut berechnet wird. Verwenden Sie f&uuml;r solche F&auml;lle besser eine <span class="listing">const</span>-Variable wie zum Beispiel: <span class="listing">const</span> <span class="listing">double</span> <span class="listing">PI</span> <span class="listing">=</span> <span class="listing">atan(1)*4;</span></p>
</td>
</tr>
</table><br>
<p>Mit der <span class="listing">#define</span>-Direktive k&ouml;nnen nicht nur Zahlen als symbolische Konstanten festgelegt werden, sondern auch Strings. Beispiel:</p>
<pre>#include &lt;stdio.h&gt;
#define GANZZAHL     int
#define SCHREIB      printf(
#define END          );
#define EINGABE      scanf(
#define ENDESTART    return 0;
#define NEUEZEILE    printf("\n");
#define START        int main()
#define BLOCKANFANG  {
#define BLOCKENDE    }</pre>
<p>Mit diesen Festlegungen wurde mit minimalem Aufwand eine eigene kleine Programmiersprache erzeugt! Ein Programm in der neuen Sprache k&ouml;nnte zum Beispiel so aussehen:</p>
<pre>START
 BLOCKANFANG
   GANZZAHL zahl;
   SCHREIB "Hallo Welt" END
   NEUEZEILE
   SCHREIB "Zahleingabe: " END
   EINGABE "%d", &amp;zahl END
   SCHREIB "Die Zahl war %d", zahl END
 ENDESTART
BLOCKENDE</pre>
<p>Hier wurde nicht wirklich eine neue Programmiersprache erzeugt. Statt <span class="listing">int</span> <span class="listing">main()</span> wird in dem Programm einfach <span class="listing">START</span> oder statt <span class="listing">return</span> <span class="listing">0</span> wird <span class="listing">ENDESTART</span> geschrieben. Der Pr&auml;prozessor ersetzt vor der &Uuml;bersetzung des Compilers die Pseudo-Sprache wieder nach C.</p>
<p>Diese Pseudo-Sprache soll jetzt in eine eigene Headerdatei gepackt werden. Legen Sie dazu eine neue Quelldatei mit folgendem Inhalt an:</p>
<pre>/* mysyntax.h */
#ifndef MYSYNTAX_H
#define MYSYNTAX_H
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#define GANZZAHL         int
#define SCHREIB          printf(
#define END              );
#define EINGABE          scanf(
#define ENDESTART        return EXIT_SUCCESS;
#define NEUEZEILE        printf("\n");
#define START            int main()
#define BLOCKANFANG      {
#define BLOCKENDE        }
#endif /*MYSYNTAX_H*/</pre>
<p>Speichern Sie diese Codezeilen unter dem Namen <span class="listing">MYSYNTAX.H</span>. Jetzt noch das Hauptprogramm inklusive der neuen Headerdatei:</p>
<pre>/* mein_C.c */
#include "mysyntax.h"
START
 BLOCKANFANG
     GANZZAHL zahl;
     SCHREIB "Hallo Welt" END
     NEUEZEILE
     SCHREIB "Zahleingabe: " END
     EINGABE "%d", &amp;zahl END
     SCHREIB "Die Zahl war %d", zahl END
     NEUEZEILE
   ENDESTART
 BLOCKENDE</pre>
<p>Speichern Sie das Hauptprogramm im selben Verzeichnis, in dem sich auch <span class="listing">mysyntax.h</span> befindet. Den Namen f&uuml;r das Hauptprogramm k&ouml;nnen Sie frei w&auml;hlen, zum Beispiel: <span class="listing">mein_C.c</span>. &Uuml;bersetzen Sie dieses Programm. Befindet sich die Headerdatei <span class="listing">mysyntax.h</span> in einem anderen Verzeichnis als das Hauptprogramm, muss dies dem Compiler mitgeteilt werden. Befindet sich die Headerdatei z.B. in /home/myhome/myheader, wird dies dem Pr&auml;prozessor wie folgt mitgeteilt:</p>
<pre>#include "/home/myhome/myheader/mysyntax.h"</pre>
<p>oder auf MS Windows-Systemen (C:\ sei Ihr Arbeitslaufwerk):</p>
<pre>#include "c:\Programme\mysyntax.h"</pre>
<a name="t32"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang" title="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t33"></a><h3 class="t3">12.2.2 Makros mit #define<a id="RxxobKap012001040027FB1F0271AD" name="RxxobKap012001040027FB1F0271AD"></a> 
      <img src="common/15x15leer.gif" width="15" height="15" border="0" alt="top"><a href="#t2t32"><img src="common/top.gif" width="15" height="15" border="0" alt="top"></a></h3>
<p><a id="Xxx999369" name="Xxx999369"></a>Weiterhin haben Sie die M&ouml;glichkeit, mit der <span class="listing">define</span>-Direktive parametrisierte Makros zu schreiben. Ein Beispiel:</p>
<pre>/* define2.c */
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#define KLEINER_100(x) ((x) &lt; 100)
void klHundert(int zahl) {
   if(KLEINER_100(zahl))
      printf("Ja! Die Zahl ist kleiner als 100!\n");
   else
      printf("Die Zahl ist gr&ouml;&szlig;er als 100!\n");
}
int main(void) {
   int b = 99;
   klHundert(b);
   return EXIT_SUCCESS;
}</pre>
<p>Ein parametrisiertes Makro erkennen Sie daran, dass unmittelbar nach dem Makronamen eine Klammer folgt:</p>
<pre>#define KLEINER_100(x)  ((x) &lt; 100)</pre>
<p>Allein stehende Makros ben&ouml;tigen bei Verwendung im Programm kein Semikolon am Ende der Zeile. Daran lassen sich Makros auch oft erkennen. Es wird zwar nicht vom Compiler moniert, wenn Sie dennoch Semikolons setzen, es ist aber nicht erforderlich.</p>
<p>Im betrachteten Fall haben Sie den formalen Parameter <span class="listing">x.</span> Dieser kann auf der rechten Seite des Makros beliebig oft verwendet werden. Dabei muss beachtet werden, dass dieser formale Parameter ebenfalls auf der rechten Seite in Klammern stehen muss. Folgende Definition w&auml;re falsch:</p>
<pre>#define KLEINER_100(x)  (x &lt; 100)</pre>
<p>da sich hier der Parameter <span class="listing">x</span> nicht zwischen Klammern befindet. Die Zeile</p>
<pre>if(KLEINER_100(zahl))</pre>
<p>sieht nach dem Pr&auml;prozessorlauf, also vor der eigentlichen Kompilierung, so aus:</p>
<pre>if((zahl) &lt; 100)</pre>
<p>Eine weitere, h&auml;ufig eingesetzte Variante dieser Art ist:</p>
<pre>#define MAX(x,y) ( (x)&lt;=(y) ?(y) :(x) )</pre>
<p>Hier werden gleich zwei Argumente als Parameter verwendet. Beide Parameter werden durch ein Komma voneinander getrennt. Bei diesem Makro wird die gr&ouml;&szlig;ere der beiden Dezimalzahlen ermittelt. Ein weiteres Beispiel:</p>
<pre>#define TAUSCHE(x,y)   { \
   int j; \
   j=x; x=y; y=j; \
  }</pre>
<p>Mit diesem Makro werden zwei Integer-Werte vertauscht. Wie sich ein Makro mit mehreren Statements &uuml;ber mehrere Zeilen erstrecken kann, l&auml;sst sich an diesem Beispiel ebenfalls erkennen. Bei der Makrodefinition muss an jedem Zeilenende ein Backslash geschrieben werden.</p>
<p>Lange Makros, auf die h&auml;ufig zugegriffen wird, k&ouml;nnen allerdings den Code unn&ouml;tig aufbl&auml;hen. In solch einem Fall sind Funktionen besser geeignet. Hierzu ein Negativ-Beispiel:</p>
<pre>/* bad_define1.c */
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#define VIEL_TEXT "TextTextTextTextTextTextTextTextTextText"\
                  "TextTextTextTextTextTextTextTextTextText"\
                  "TextTextTextTextTextTextTextTextTextText"\
                  "TextTextTextTextTextTextTextTextTextText\n"
int main(void) {
   printf(VIEL_TEXT);
   printf(VIEL_TEXT);
   printf(VIEL_TEXT);
   return EXIT_SUCCESS;
}</pre>
<p>Dieses Programm w&uuml;rde nach dem Pr&auml;prozessorlauf und vor dem Compilerlauf folgenderma&szlig;en aussehen:</p>
<pre>/* bad_define2.c */
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
int main(void) {
   printf("TextTextTextTextTextTextTextTextTextText"\
          "TextTextTextTextTextTextTextTextTextText"\
          "TextTextTextTextTextTextTextTextTextText"\
          "TextTextTextTextTextTextTextTextTextText\n");
   printf("TextTextTextTextTextTextTextTextTextText"\
          "TextTextTextTextTextTextTextTextTextText"\
          "TextTextTextTextTextTextTextTextTextText"\
          "TextTextTextTextTextTextTextTextTextText\n");
   printf("TextTextTextTextTextTextTextTextTextText"\
          "TextTextTextTextTextTextTextTextTextText"\
          "TextTextTextTextTextTextTextTextTextText"\
          "TextTextTextTextTextTextTextTextTextText\n");
   return EXIT_SUCCESS;
}</pre>
<p>Jetzt dasselbe Beispiel mit einer Funktion, welche in diesem Fall die effizientere Methode darstellt:</p>
<pre>/* without_define.c */
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
void viel_text(void) {
   printf("TextTextTextTextTextTextTextTextTextText"\
          "TextTextTextTextTextTextTextTextTextText"\
          "TextTextTextTextTextTextTextTextTextText"\
          "TextTextTextTextTextTextTextTextTextText\n");
}
int main(void) {
   viel_text();
   viel_text();
   viel_text();
   return EXIT_SUCCESS;
}</pre>
<p>Die <span class="listing">define</span>-Direktive ist im &Uuml;brigen eine rein f&uuml;r die Programmiersprache C gedachte Direktive. Ein reiner C++-Compiler wird <span class="listing">define</span> deshalb nicht erkennen und kompilieren. Die meisten Compiler kennen aber sowohl C als auch C++.</p>
<p>In der Regel sollten hier also keine Probleme beim Kompilieren auftreten. Dies nur erg&auml;nzend zum Thema, falls Sie die Grundlagen in C kennen lernen wollen, um anschlie&szlig;end mit C++ fortzufahren. Unter C++ und dem neuen ANSI C99-Standard k&ouml;nnen kleinere Funktionsmakros au&szlig;erdem durch <span class="listing">inline<a id="Xxx999394" name="Xxx999394"></a></span>-Funktionen ersetzt werden.</p>
<br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext" bgcolor="#000000">
<p class="BStandard"><b>Hinweis   <a id="Xxx999397" name="Xxx999397"></a></b>Der Geltungsbereich von symbolischen Konstanten bzw. Makros reicht vom Punkt der Deklaration mit <span class="listing">#define</span> bis zur Aufhebung mit <span class="listing">#undef</span>. Die Aufhebung mittels <span class="listing">#undef</span> ist aber optional. Wird <span class="listing">#undef</span> nicht verwendet, reicht der Geltungsbereich bis zum Dateiende.</p>
</td>
</tr>
</table><br>
</td>
</tr>
</table>
</td>
</tr>
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center">
<table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a class="navnav" href="c_012_000.htm"> &lt;&lt; zur&uuml;ck</a></td>
<td width="49%">
<div align="center"><a class="navnav" href="#">&lt;top&gt;</a></div>
</td>
<td align="right" width="25%">
<div align="right"><a class="navnav" href="c_012_002.htm">vor &gt;&gt; </a></div>
</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</td>
<td width="10" valign="top">&nbsp;&nbsp;</td>
<td width="160" valign="top">
    <table border="0" cellpadding="0" cellspacing="0" width="160">
        <tr>
            <td>
                <table border="0" cellpadding="0" cellspacing="0" width="100%">
                    <tr>
                        <td class="tbl2" height="20" colspan="2">
                            &nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=opc" class="navs">
                            <strong>Zum Katalog</strong></a>
                        </td>
                    </tr>
                    <tr>
                        <td valign="top" class="tbl2" width="2">
                            <img src="common/leer.gif" border="0" height="1" width="1"></td>
                        <td valign="top">
                            <table cellspacing="3">
                                <tr>
                                    <td><a href="http://www.galileocomputing.de/899?GPP=opc">
                                        <img src="common/643_90px.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: C von A bis Z" title="Zum Katalog: C von A bis Z">
                                        <br /><strong>C von A bis Z</strong><br /><img src="common/pfeil_rechts5.gif" border="0" alt="">bestellen</a>
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
            </td>
        </tr>
        <tr>
            <td><img src="common/leer.gif" height="2" width="1" border="0" /></td>
        </tr>
        <tr>
            <td>
                <table border="0" cellpadding="0" cellspacing="0" width="100%">
                    <tr>
                        <td class="tbl2" height="20" colspan="2"><strong>&nbsp;Ihre Meinung?</strong></td>
                    </tr>
                    <tr>
                        <td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
                        <td valign="top">
                            <table cellspacing="3">
                                <tr>
                                    <td>Wie hat Ihnen das &lt;openbook&gt; gefallen?<br /><a href="mailto:stefan.krumbiegel@galileo-press.de?subject=Meinung%20zu%20C%20von%20A%20bis%20Z%20(openbook)"><img src="common/pfeil_rechts5.gif" border="0" alt="">Ihre Meinung</a>
                                    <br /><br /></td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
            </td>
        </tr>
        <tr>
            <td><img src="common/leer.gif" height="2" width="1" border="0" /></td>
        </tr>
        <tr>
            <td>
                <table border="0" cellpadding="0" cellspacing="0" width="100%">
                    <tr>
                        <td class="tbl2" height="20" colspan="2">&nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=opc" class="navs"><strong>Buchtipps</strong></a></td>
                    </tr>
                    <tr>
                        <td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
                        <a href="http://www.galileocomputing.de/1007?GPP=opc">
                        <img src="common/683_90px.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Shell-Programmierung" title="Zum Katalog: Shell-Programmierung"><br /><br /><br /><br /><br /><br /><br />&nbsp;Shell-Programmierung</a><br /><br /></td>
                    </tr>
                    <tr>
                        <td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
                        <a href="http://www.galileocomputing.de/1137?GPP=opc">
                        <img src="common/749_90px.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Linux-UNIX-Programmierung" title="Zum Katalog: Linux-UNIX-Programmierung"><br /><br /><br /><br /><br /><br /><br />&nbsp;Linux-UNIX-Programmierung</a><br /><br /></td>
                    </tr>
                    <tr>
                        <td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
                        <a href="http://www.galileocomputing.de/1004?GPP=opc">
                        <img src="common/644_90px.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: C/C++" title="Zum Katalog: C/C++"><br /><br /><br /><br /><br /><br /><br />&nbsp;C/C++</a><br /><br /></td>
                    </tr>
                    <tr>
                        <td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
                        <a href="http://www.galileocomputing.de/880?GPP=opc">
                        <img src="common/573_90px.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: UML 2.0" title="Zum Katalog: UML 2.0"><br /><br /><br /><br /><br /><br /><br />&nbsp;UML 2.0</a><br /><br /></td>
                    </tr>
                    <tr>
                        <td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
                        <a href="http://www.galileocomputing.de/967?GPP=opc">
                        <img src="common/626_90px.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Reguläre Ausdrücke" title="Zum Katalog: Reguläre Ausdrücke"><br /><br /><br /><br /><br /><br /><br />&nbsp;Reguläre Ausdrücke</a><br /><br /></td>
                    </tr>
                    <tr>
                        <td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
                        <a href="http://www.galileocomputing.de/941?GPP=opc">
                        <img src="common/677_90px.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Linux" title="Zum Katalog: Linux"><br /><br /><br /><br /><br /><br /><br />&nbsp;Linux</a><br /><br /></td>
                    </tr>
                </table></td>
        </tr>
        <tr>
            <td><img src="common/leer.gif" height="2" width="1" border="0" /></td>
        </tr>
        <tr>
            <td>
                <table border="0" cellpadding="0" cellspacing="0" width="100%">
                    <tr>
                        <td class="tbl2" height="20" colspan="2"><strong>&nbsp;Shopping</strong></td>
                    </tr>
                    <tr>
                        <td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
                        <td valign="top">
                            <table cellspacing="3">
                                <tr>
                                    <td><b>Versandkostenfrei</b> bestellen in Deutschland und &Ouml;sterreich<br /><a href="http://www.galileocomputing.de/hilfe/Shop/?GPP=opc"><img src="common/pfeil_rechts5.gif" border="0" alt="Info">Info</a><br /><br /></td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
            </td>
        </tr>
    </table>
</td>
</tr>
</table>
<br /><br />
<hr width="70%" align="center"><br />
<div align="center">
<p class="standard"><b>Copyright © Galileo Press 2006</b><br>F&uuml;r Ihren privaten Gebrauch d&uuml;rfen Sie die Online-Version nat&uuml;rlich ausdrucken. Ansonsten unterliegt das &lt;openbook&gt; denselben Bestimmungen, wie die gebundene Ausgabe: Das Werk einschlie&szlig;lich aller seiner Teile ist urheberrechtlich gesch&uuml;tzt. Alle Rechte vorbehalten einschlie&szlig;lich der Vervielf&auml;ltigung, &Uuml;bersetzung, Mikroverfilmung sowie Einspeicherung und Verarbeitung in elektronischen Systemen.</p><br><a href="http://www.galileocomputing.de/">[Galileo Computing]</a><br><br>Galileo Press, Rheinwerkallee 4, 53227 Bonn, Tel.: 0228.42150.0, Fax 0228.42150.77, <a href="mailto:info@galileo-press.de">info@galileo-press.de</a></div><br><br></body>
</html>
