<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Galileo Computing :: C von A bis Z – 14.2 Zeiger initialisieren</title>
<meta name="title" content="Galileo Computing :: C von A bis Z">
<meta name="author" content="J&uuml;rgen Wolf">
<meta name="publisher" content="Galileo Press 2006">
<meta name="copyright" content="Galileo Press 2006">
<meta name="description" content="C von A bis Z - Das umfassende Handbuch f&uuml;r Linux, Unix und Windows – 2., aktualisierte und erweiterte Auflage 2006, geb., mit CD und Referenzkarte – ISBN 3-89842-643-2">
<meta name="audience" content="Alle">
<meta name="robots" content="INDEX,FOLLOW">
<meta http-equiv="content-language" content="de">
<link rel="stylesheet" type="text/css" href="common/galileo_open.css">
<link rel="prev" href="c_014_000.htm">
<link rel="next" href="c_014_002.htm"><script type="text/javascript" language="JavaScript"><!--
function OpenWin(url,name,height,width)
{
  var InfoWin = window.open(url,name,"directories=0,height="+height+",width=" + width + ",hotkeys=0,location=0,menubar=0,resizable=1,screenX=150,screenY=10,left=150,top=10,scrollbars=1,status=1,titlebar=0,toolbar=0");
  InfoWin.focus();
}
//--></script></head>
<body vlink="#000099" link="#000099" alink="#000099">
    <table width="100%" height="74" border="0" cellpadding="0" cellspacing="0" bgcolor="#000066">
        <tr>
            <td height="74" valign="bottom" colspan="2"><a href="http://www.galileocomputing.de/katalog/openbook/?GPP=opc"><img src="common/galileocomputing_openbook.gif" width="200" height="56" border="0" alt="Galileo Computing < openbook >" title="Galileo Computing < openbook >"></a></td>
            <td width="80" height="74"><a href="http://www.galileocomputing.de/?GPP=opc"><img src="common/galileocomputing.gif" border="0" alt="Galileo Computing - Professionelle B&uuml;cher. Auch f&uuml;r Einsteiger." title="Galileo Computing - Professionelle B&uuml;cher. Auch f&uuml;r Einsteiger."></a></td>
        </tr>
    </table>
    <div align="right"><a href="http://www.galileocomputing.de/?GPP=opc" class="navnav">Professionelle B&uuml;cher. Auch f&uuml;r Einsteiger.</a></div>
    <br />
<table border="0" cellpadding="0" cellspacing="0" width="100%">
    <tr>
        <td width="156" valign="top">
    <table border="0" cellpadding="0" cellspacing="0" width="100%" align="left">
        <tr>
            <td colspan="2" class="nav1" align="left" valign="top" height="150">
                <table class="tbl1" width="150" border="0" cellpadding="3" cellspacing="0">
<tr>
<td class="tbl2" height="25"><a class="nav" href="./index.htm">Inhaltsverzeichnis</a></td>
</tr>
<tr>
<td><a class="navnav" href="./c_000Vorwort_000.htm#Xxx999266">Vorwort</a></td>
</tr>
<tr>
<td><a class="navnav" href="./c_000VorwortGutachter_000.htm#Xxx999275">Vorwort des Gutachters</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_001_000.htm#Xxx999328">1 Einstieg in C</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_002_000.htm#Xxx999328">2 Das erste Programm</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_003_000.htm#Xxx999328">3 Zeichens&auml;tze</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_004_000.htm#Xxx999329">4 Kommentare in C</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_005_000.htm#Xxx999330">5 Formatierte Eingabe mit scanf()</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_006_000.htm#Xxx999330">6 Formatierte Ausgabe mit printf</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_007_000.htm#Xxx999329">7 Elementare Datentypen</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_008_000.htm#Xxx999328">8 Operatoren</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_009_000.htm#Xxx999328">9 Typenumwandlung</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_010_000.htm#Xxx999328">10 Kontrollstrukturen</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_011_000.htm#Xxx999328">11 Funktionen</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_012_000.htm#Xxx999328">12 Pr&auml;prozessor-Direktiven</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_013_000.htm#Xxx999328">13 Arrays</A></td>
</tr>
<tr>
<td><A class="navh" href="./c_014_000.htm#Xxx999328">14 Zeiger (Pointer)</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_015_000.htm#Xxx999328">15 Kommandozeilenargumente</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_016_000.htm#Xxx999328">16 Dynamische Speicherverwaltung</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_017_000.htm#Xxx999328">17 Strukturen</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_018_000.htm#Xxx999328">18 Ein-/Ausgabe-Funktionen</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_019_000.htm#Xxx999328">19 Attribute von Dateien und Arbeiten mit Verzeichnissen (nicht ANSI C)</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_020_000.htm#Xxx999328">20 Arbeiten mit variablen langen Argumentlisten – &lt;stdarg.h&gt;</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_021_000.htm#Xxx999328">21 Zeitroutinen</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_022_000.htm#Xxx999328">22 Weitere Headerdateien und ihre Funktionen (ANSI C)</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_023_000.htm#Xxx999328">23 Dynamische Datenstrukturen</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_024_000.htm#Xxx999328">24 Algorithmen</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_025_000.htm#Xxx999328">25 Sicheres Programmieren</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_026_000.htm#Xxx999328">26 CGI mit C</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_027_000.htm#Xxx999328">27 MySQL und C</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_028_000.htm#Xxx999328">28 Netzwerkprogrammierung und Cross-Plattform-Entwicklung</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_029_000.htm#Xxx999328">29 Wie geht’s jetzt weiter?</A></td>
</tr>
<tr>
<td><a class="navnav" href="./c_030Anhang_000.htm#Xxx999266">A Anhang</A></td>
</tr>
<tr>
<td><a class="navnav" href="./stichwort.htm#Xxx512322">Index</a></td>
</tr>
<tr><td><br /><a class="navnav" href="http://download.galileo-press.de/openbook/c_von_a_bis_z/galileocomputing_c_von_a_bis_z.zip"><strong>Download:</strong><br />- ZIP, ca. 8,5 MB</a></td></tr>
<tr><td><a class="navnav" href="http://www.galileocomputing.de/899?GPP=opc">Buch bestellen</a></td></tr>
<tr><td><a class="navnav" href="mailto:stefan.krumbiegel@galileo-press.de?subject=Meinung%20zu%20C%20von%20A%20bis%20Z%20(openbook)">Ihre Meinung?</a><br /><br /></td></tr>
</table></td>
</tr>
</table>
</td>
<td width="10"><img src="common/spacer10.gif" width="10" height="10"></td>
<td width="85%" valign="top" align="center">
    <div align="center">
        <table width="98%" border="0" cellspacing="0" cellpadding="0" bgcolor="#FFFFFF">
            <tr>
                <td width="100%" class="start" colspan="1" height="22" align="center">
                    <table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a class="navnav" href="c_014_000.htm"> &lt;&lt; zur&uuml;ck</a></td>
<td width="49%">
<div align="center"><a href="http://www.galileocomputing.de/?GPP=opc" class="navnav">Galileo Computing /</a><a class="navnav" href="http://www.galileocomputing.de/katalog/openbook/?GPP=opc"> &lt;openbook&gt; /</a><a href="./index.htm" class="navnav"> C von A bis Z</a></div>
</td>
<td align="right" width="25%">
<div align="right"><a class="navnav" href="c_014_002.htm">vor &gt;&gt; </a></div>
</td>
</tr>
</table>
</td>
</tr>
<tr>
<td width="100%" valign="top">
    <table width="100%" border="0" cellpadding="10" cellspacing="0" class="box">
        <tr>
            <td colspan="2"><a href="http://www.galileocomputing.de/899?GPP=opc" class="buchtitel">C von A bis Z</a><span class="autor"> von J&uuml;rgen Wolf</span><br><span class="untertitel">Das umfassende Handbuch f&uuml;r Linux, Unix und Windows <br />– 2., aktualisierte und erweiterte Auflage 2006</span></td>
        </tr>
        <tr>
            <td valign="top" width="90"><a href="http://www.galileocomputing.de/899?GPP=opc"><img src="common/643.gif" border="0" alt="Buch: C von A bis Z" title="Buch: C von A bis Z" align="left"><br /><br /><span class="autor"><strong>C von A bis Z</strong><br />1.116 S., mit CD, Referenzkarte, 39,90 Euro<br />Galileo Computing<br />ISBN 3-89842-643-2</span></a></a></td>
            <td width="80%">
<table border="0">
<tr>
<td valign="baseline"><img src="common/pfeil_u.gif" width="10" height="10" border="0" alt="gp"></td>
<td valign="baseline" colspan="3" class="kap"><b>Kapitel <a href="./c_014_000.htm#RxxobKap014000040028A01F03F18C">14 Zeiger (Pointer)</a></b></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="gp"></td>
<td valign="baseline" colspan="2"><b><a href="./c_014_000.htm#RxxobKap014000040028A01F03F196">14.1 Zeiger deklarieren</a></b></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="gp"></td>
<td valign="baseline" colspan="2"><b><a class="navh" href="#RxxobKap014001040028BB1F02E18C">14.2 Zeiger initialisieren</a></b></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="gp"></td>
<td valign="baseline"><b><a class="navh" href="#RxxobKap014001040028BB1F02E1ED">14.2.1 Speichergr&ouml;&szlig;e von Zeigern</a></b></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="gp"></td>
<td valign="baseline" colspan="2"><b><a href="./c_014_002.htm#RxxobKap014002040028BC1F01F18C">14.3 Zeigerarithmetik</a></b></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="gp"></td>
<td valign="baseline" colspan="2"><b><a href="./c_014_003.htm#RxxobKap014003040028BD1F02718C">14.4 Zeiger, die auf andere Zeiger verweisen</a></b></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="gp"></td>
<td valign="baseline"><b><a href="./c_014_003.htm#RxxobKap014003040028BD1F027199">14.4.1 Subtraktion zweier Zeiger</a></b></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="gp"></td>
<td valign="baseline" colspan="2"><b><a href="./c_014_004.htm#RxxobKap014004040028BE1F04B18C">14.5 Typensicherung bei der Dereferenzierung</a></b></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="gp"></td>
<td valign="baseline" colspan="2"><b><a href="./c_014_005.htm#RxxobKap014005040028BF1F03318C">14.6 Zeiger als Funktionsparameter (call–by–reference)</a></b></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="gp"></td>
<td valign="baseline"><b><a href="./c_014_005.htm#RxxobKap014005040028BF1F0331A3">14.6.1 Zeiger als R&uuml;ckgabewert</a></b></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="gp"></td>
<td valign="baseline" colspan="2"><b><a href="./c_014_006.htm#RxxobKap014006040028C01F04118C">14.7 Array und Zeiger</a></b></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="gp"></td>
<td valign="baseline" colspan="2"><b><a href="./c_014_007.htm#RxxobKap014007040028C11F01F18C">14.8 Zeiger auf Strings</a></b></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="gp"></td>
<td valign="baseline"><b><a href="./c_014_007.htm#RxxobKap014007040028C11F01F192">14.8.1 Zeiger auf konstante Objekte (Read-only-Zeiger)</a></b></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="gp"></td>
<td valign="baseline" colspan="2"><b><a href="./c_014_008.htm#RxxobKap014008040028C21F04A18C">14.9 Zeiger auf Zeiger und Stringtabellen</a></b></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="gp"></td>
<td valign="baseline"><b><a href="./c_014_008.htm#RxxobKap014008040028C21F04A198">14.9.1 Stringtabellen</a></b></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="gp"></td>
<td valign="baseline" colspan="2"><b><a href="./c_014_009.htm#RxxobKap014009040028C31F02918C">14.10 Zeiger auf Funktionen</a></b></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="gp"></td>
<td valign="baseline" colspan="2"><b><a href="./c_014_010.htm#RxxobKap014010040028C41F03A18C">14.11 void-Zeiger</a></b></td>
</tr>
<tr>
<td valign="baseline" width="10"> </td>
<td valign="baseline" width="10"><img src="common/pfeil_rechts5.gif" width="10" height="10" border="0" alt="gp"></td>
<td valign="baseline" colspan="2"><b><a href="./c_014_011.htm#RxxobKap014011040028C51F02418C">14.12 &Auml;quivalenz zwischen Zeigern und Arrays</a></b></td>
</tr>
</table><br></td>
</tr>
</table>
<table width="100%" cellpadding="20" cellspacing="0" border="0" bgcolor="#eeeeee">
<tr>
<td>
<a name="t21"></a><a name="t2t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang" title="Galileo Computing - Zum Seitenanfang"></a></div>
<h2 class="t2">14.2 Zeiger initialisieren<a id="RxxobKap014001040028BB1F02E18C" name="RxxobKap014001040028BB1F02E18C"></a> 
      <a href="#t2t32"><img src="common/down.gif" width="15" height="15" border="0" alt="down"></a><img src="common/15x15leer.gif" width="15" height="15" border="0" alt="top"></h2>
<p><a id="Xxx999329" name="Xxx999329"></a>Hier beginnt eine gef&auml;hrliche Operation. Wird im Programm ein Zeiger verwendet, der zuvor nicht initialisiert wurde, kann dies zu schwerwiegenden Fehlern f&uuml;hren – gar bis zum Absturz eines Betriebssystems (bei 16-Bit-Systemen). Die Gefahr ist, dass bei einem Zeiger, der nicht mit einer g&uuml;ltigen Adresse initialisiert wurde und auf den jetzt zur&uuml;ckgegriffen werden soll, stattdessen einfach auf irgendeine Adresse im Arbeitsspeicher zur&uuml;ckgegriffen wird. Wenn sich in diesem Speicherbereich wichtige Daten oder Programme bei der Ausf&uuml;hrung befinden, kommt es logischerweise zu Problemen.</p>
<p>Um das Prinzip der Zeiger zu verstehen, m&uuml;ssen Sie nochmals zur&uuml;ck zu den normalen Datentypen springen. Beispielsweise zu folgender Initialisierung:</p>
<pre>int x = 5;</pre>
<p>Durch diese Initialisierung ergibt sich im Arbeitsspeicher folgendes Bild:</p>
<p><a name="bild"></a><a href="#bild" onClick="OpenWin('bilder/14_01.gif','Abbildung',600,600)"><img border="0" src="bilderklein/klein14_01.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu Vergr&ouml;&szlig;ern</span></a></p>
<p class="tabunter"><b>Abbildung 14.1   
    </b>Darstellung einer Variablen im Arbeitsspeicher</p>
<p>Die Adresse ist eine erfundene Adresse im Arbeitsspeicher, auf die Sie keinen Einfluss haben. Diese wird vom System beim Start des Programms vergeben. Damit der Rechner wei&szlig;, von wo er den Wert einer Variablen auslesen soll, wird eine Adresse ben&ouml;tigt. Ebenso sieht es mit der Initialisierung einer Variablen aus, falls dieser ein Wert zugewiesen wird. Der Name einer Variablen ist der Name, den Sie bei der Deklaration selbst festgelegt haben. Der Wert 5 wurde zu Beginn des Programms definiert. Dieser Block oben hat eine Speichergr&ouml;&szlig;e von vier Bytes (<span class="listing">int</span> = vier Byte oder, auf 16-Bit-Systemen, zwei Bytes).</p>
<p>Hundertprozentig stimmt diese Analyse eines Datentyps nicht. Es gibt noch einige weitere Attribute, die ein Datentyp besitzt. Hier die nicht genannten Attribute:</p>
<table width="100%" border="0">
<tr>
<td valign="baseline" width="16"><img src="common/gp.gif" width="8" height="9" border="0" alt="gp"> 
        </td>
<td valign="top" width="100%" align="left"> Wann bekommt die Variable ihren Speicherplatz zugeordnet? (Das ist abh&auml;ngig vom Schl&uuml;sselwort <span class="listing">static</span> oder <span class="listing">auto</span>.)</td>
</tr>
</table>
<table width="100%" border="0">
<tr>
<td valign="baseline" width="16"><img src="common/gp.gif" width="8" height="9" border="0" alt="gp"> 
        </td>
<td valign="top" width="100%" align="left"> Wie lange bleibt der Speicherort dieser Variablen g&uuml;ltig?</td>
</tr>
</table>
<table width="100%" border="0">
<tr>
<td valign="baseline" width="16"><img src="common/gp.gif" width="8" height="9" border="0" alt="gp"> 
        </td>
<td valign="top" width="100%" align="left"> Wer kann diesen Wert &auml;ndern bzw. abrufen? (Das ist abh&auml;ngig vom G&uuml;ltigkeitsbereich und von der Sichtbarkeit der Variablen (global, lokal, Schl&uuml;sselwort <span class="listing">const</span>.)</td>
</tr>
</table>
<table width="100%" border="0">
<tr>
<td valign="baseline" width="16"><img src="common/gp.gif" width="8" height="9" border="0" alt="gp"> 
        </td>
<td valign="top" width="100%" align="left"> Wann wird die Variable gespeichert? (Das ist abh&auml;ngig vom Schl&uuml;sselwort <span class="listing">volatile</span>.)</td>
</tr>
</table>
<p>Dies dient allerdings hier nur zur Information, denn die Dinge sollten jetzt nicht komplizierter gemacht werden als sie sind.</p>
<p>Ben&ouml;tigen Sie die Adresse einer Variablen im Arbeitsspeicher, dann kann diese mit dem Formatzeichen <span class="listing">%p</span> und dem Adressoperator <span class="listing">&amp;</span> abgefragt und ausgegeben werden:</p>
<pre>/* ptr1.c */
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
int main(void) {
   int x = 5;
   printf("Die Adresse von x ist %p \n",&amp;x);
   return EXIT_SUCCESS;
}</pre>
<p>In diesem Beispiel wurde mithilfe des Adressoperators und dem Formatzeichen <span class="listing">%p</span> die aktuelle Speicheradresse der Variablen <span class="listing">x</span> ausgegeben.</p>
<p>Jetzt ist auch klar, warum <span class="listing">scanf()</span> eine Fehlermeldung ausgibt, wenn kein Adressoperator<a id="Xxx999350" name="Xxx999350"></a> mit angegeben wird:</p>
<pre>scanf("%d",x);  /* Wohin damit ...??? */</pre>
<p>Das w&auml;re dasselbe, als wenn der Postbote einen Brief zustellen soll, auf dem sich keine Anschrift befindet. Der Brief wird niemals sein Ziel erreichen. Genauso l&auml;uft es in Ihrem PC ab, egal ob Sie jetzt ein Computerspiel spielen oder ein Textverarbeitungsprogramm verwenden. Jedes Speicherobjekt, das Sie definieren, hat eine Adresse, einen Namen und eine bestimmte Speichergr&ouml;&szlig;e (je nach Datentyp). Der Wert ist der einzige dieser vier Angaben, der zur Laufzeit festgelegt oder ver&auml;ndert werden kann.</p>
<p>Wie kann jetzt einem Zeiger die Adresse einer Variablen &uuml;bergeben werden? Dies soll das folgende Beispiel demonstrieren:</p>
<pre>/* ptr2.c */
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
int main(void) {
   int abfrage;
   int Kapitel1 = 5;
   int Kapitel2 = 60;
   int Kapitel3 = 166;
   int Nachtrag = 233;
   int *Verzeichnis;   /* Zeiger */
   do {
      printf("\tINDEXREGISTER VOM BUCH\n");
      printf("\t*******************************\n\n");
      printf("\t-1- Kapitel 1\n");
      printf("\t-2- Kapitel 2\n");
      printf("\t-3- Kapitel 3\n");
      printf("\t-4- Nachtrag\n");
      printf("\t-5- Ende\n");
      printf("\n");
      printf("\tAuswahl : ");
      scanf("%d",&amp;abfrage);
      printf("\tKapitel %d finden Sie auf ",abfrage);
      switch(abfrage) {
         case 1  :  Verzeichnis =&amp; Kapitel1;
                    printf("Seite %d\n", *Verzeichnis);
                    break;
         case 2  :  Verzeichnis =&amp; Kapitel2;
                    printf("Seite %d\n", *Verzeichnis);
                    break;
         case 3  :  Verzeichnis =&amp; Kapitel3;
                    printf("Seite %d\n", *Verzeichnis);
                    break;
         case 4  :  Verzeichnis =&amp; Nachtrag;
                    printf("Seite %d\n", *Verzeichnis);
                    break;
         default :  printf("Seite ???\n");
                    break;
      }
   } while(abfrage &lt; 5);
   return EXIT_SUCCESS;
}</pre>
<p>Der Zeiger des Programms:</p>
<pre>int *Verzeichnis;</pre>
<p>Hiermit wurde ein Zeiger deklariert mit dem Namen <span class="listing">Verzeichnis</span>. Bis zur <span class="listing">switch</span>-Verzweigung so weit nichts Neues. Aber dann in der ersten <span class="listing">case</span>-Anweisung:</p>
<p><span class="listing">Verzeichnis</span> <span class="listing">=&amp;</span> <span class="listing">Kapitel1;</span></p>
<p><a name="bild"></a><a href="#bild" onClick="OpenWin('bilder/14_02.gif','Abbildung',600,600)"><img border="0" src="bilderklein/klein14_02.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu Vergr&ouml;&szlig;ern</span></a></p>
<p class="tabunter"><b>Abbildung 14.2   
    </b>Programm zur Verwendung der Zeiger in Aktion</p>
<p>Damit wird dem Zeiger <span class="listing">Verzeichnis</span> die Adresse der Variablen <span class="listing">Kapitel1</span> &uuml;bergeben. Dies k&ouml;nnen Sie am Adressoperator <span class="listing">&amp;</span> erkennen, der sich vor der Variablen <span class="listing">Kapitel1</span> befindet. Sollte der Adressoperator vor der Variablen <span class="listing">Kapitel1</span> vergessen werden, wird der Compiler das Programm nicht &uuml;bersetzen, da ein Zeiger eine Adresse und nicht den Wert einer Variablen haben will.</p>
<p>Zu diesem Beispiel folgt ein kleiner Ausschnitt, der verdeutlicht, was im Speicher alles geschieht:</p>
<pre>int Kapitel1 = 5;
int Kapitel2 = 60;
int Kapitel3 = 166;
int Nachtrag = 233;
int *Verzeichnis;</pre>
<p><a name="bild"></a><a href="#bild" onClick="OpenWin('bilder/14_03.gif','Abbildung',600,600)"><img border="0" src="bilderklein/klein14_03.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu Vergr&ouml;&szlig;ern</span></a></p>
<p class="tabunter"><b>Abbildung 14.3   
    </b>Darstellung im Arbeitsspeicher</p>
<p>Zun&auml;chst erfolgt bspw. die Adress&uuml;bergabe der Variablen <span class="listing">Kapitel1</span> an den Zeiger <span class="listing">Verzeichnis</span> mit dem Adressoperator:</p>
<pre>Verzeichnis =&amp; Kapitel1;</pre>
<p><a name="bild"></a><a href="#bild" onClick="OpenWin('bilder/14_04.gif','Abbildung',600,600)"><img border="0" src="bilderklein/klein14_04.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu Vergr&ouml;&szlig;ern</span></a></p>
<p class="tabunter"><b>Abbildung 14.4   
    </b>Der Zeiger verweist hier auf die Adresse der Variablen Kapitel1</p>
<p>Daran l&auml;sst sich erkennen, wie der Zeiger <span class="listing">Verzeichnis</span> die Adresse der Variablen <span class="listing">Kapitel1</span> enth&auml;lt. Ein wenig anders sieht es dann hiermit aus:</p>
<pre>printf("Seite %d\n", *Verzeichnis);</pre>
<p><a id="Xxx999381" name="Xxx999381"></a>Hier kommt zum ersten Mal der Indirektionssoperator<a id="Xxx999382" name="Xxx999382"></a> (<span class="listing">*</span>) ins Spiel. Dieser dereferenziert den Wert der Adresse, mit welcher der Zeiger zuvor mit</p>
<pre>Verzeichnis =&amp; Kapitel1;</pre>
<p>initialisiert wurde. Lassen Sie bei der Ausgabe einfach einmal den Indirektionssoperator weg:</p>
<pre>printf("Seite %d\n", Verzeichnis);   /* ohne ’*’ */</pre>
<p>&Uuml;bersetzen Sie dieses Programm erneut und lassen Sie sich das <span class="listing">Verzeichnis</span> von <span class="listing">Kapitel1</span> ausgeben. Es wird irgendeine Zahl ausgegeben, nur nicht die Zahl 5. Warum? Eine Um&auml;nderung der Zeile</p>
<pre>printf("Seite %d\n", *Verzeichnis);</pre>
<p>in</p>
<pre>printf("Adressen %p %p\n", *Verzeichnis, Kapitel1);</pre>
<p>zeigt mehr. Jetzt soll wieder das erste Kapitel bei der Abfrage verwendet werden. Danach m&uuml;ssten beide Male dieselben Adressen ausgegeben werden. Mit <span class="listing">Verzeichnis</span> <span class="listing">=&amp;</span> <span class="listing">Kapitel1</span> wurde doch nur die Adresse &uuml;bergeben. Und im Zeiger selbst befindet sich auch nur die Adresse von <span class="listing">Kapitel1</span>. Ohne den Indirektionsoperator ist der Zeiger hier nutzlos. Nur mit diesem k&ouml;nnen Sie auf den Inhalt einer Variablen mithilfe eines Zeigers zugreifen.</p>
<p>Wenn Sie den Zeiger jetzt auf <span class="listing">Kapitel3</span> (<span class="listing">Verzeichnis</span> <span class="listing">=&amp;</span> <span class="listing">Kapitel3</span>) verweisen lassen, ergibt sich folgender Stand im Arbeitsspeicher:</p>
<p><a name="bild"></a><a href="#bild" onClick="OpenWin('bilder/14_05.gif','Abbildung',600,600)"><img border="0" src="bilderklein/klein14_05.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu Vergr&ouml;&szlig;ern</span></a></p>
<p class="tabunter"><b>Abbildung 14.5   
    </b>Zeiger verweist jetzt auf die Adresse von Kapitel3</p>
<br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext" bgcolor="#000000">
<p class="BStandard"><b>Merke   </b>Wird der Indirektionsoperator (<span class="listing">*</span>) vorangestellt, erkennen Sie, dass nicht auf den Zeiger zur&uuml;ckgegriffen werden soll, sondern auf das Datenobjekt, dessen Anfangsadresse sich im Zeiger befindet.</p>
</td>
</tr>
</table><br>
<p>Zum besseren Verst&auml;ndnis folgt dazu ein weiteres Programm, welches die Verwendung von Zeigern detaillierter darstellen soll. Ein lehrreiches Beispiel, bei dem es sich lohnt, es zu studieren:</p>
<pre>/* ptr3.c */
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
int main(void) {
   int x=5;
   int *y;
   printf("Adresse x=%p, Wert x=%d\n", &amp;x, x);
   /*  F&uuml;hrt bei manchen Systemen zum Programmabsturz
    *  ggf. auskommentieren */
   printf("Adresse *y=%p, Wert *y=%d(unsinn)\n", &amp;y, *y);
   printf("\ny=&amp;x;\n\n");
   /* y hat jetzt die Adresse von x */
   y =&amp; x;
   printf("Adresse  x=%p, Wert x=%d\n", &amp;x, x);
   printf("Adresse *y=%p, Wert *y=%d\n", &amp;y, *y);
   printf("\nAdresse auf die y zeigt ist %p\n", y);
   printf("und das ist die Adresse von x = %p\n", &amp;x);
   printf("\nACHTUNG!!!\n\n");
   *y=10;
   printf("*y=10\n\n");
   printf("Adresse  x=%p, Wert  x=%d\n", &amp;x, x);
   printf("Adresse *y=%p, Wert *y=%d\n", &amp;y, *y);
   printf("\nAdresse auf die y zeigt ist %p\n", y);
   printf("weiterhin die von x (%p)\n", &amp;x);
   return EXIT_SUCCESS;
}</pre>
<p><a name="bild"></a><a href="#bild" onClick="OpenWin('bilder/14_06.gif','Abbildung',600,600)"><img border="0" src="bilderklein/klein14_06.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu Vergr&ouml;&szlig;ern</span></a></p>
<p class="tabunter"><b>Abbildung 14.6   
    </b>Ausgabe des Programms unter Linux</p>
<p>Folgende Zeile d&uuml;rfte Ihnen bei diesem Programm aufgefallen sein:</p>
<pre>*y = 10;</pre>
<p>Hiermit wird der Wert der Variablen <span class="listing">x</span> dereferenziert. Mit dieser Dereferenzierung kann jederzeit auf den Wert der Variablen <span class="listing">x</span> zugegriffen werden. Dadurch kann mithilfe eines Zeigers der Inhalt der Variablen ver&auml;ndert werden, und zwar so, als w&uuml;rden Sie direkt darauf zugreifen. Hierzu der Verlauf bildlich:</p>
<pre>int x = 5;
int *y;</pre>
<p><a name="bild"></a><a href="#bild" onClick="OpenWin('bilder/14_07.gif','Abbildung',600,600)"><img border="0" src="bilderklein/klein14_07.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu Vergr&ouml;&szlig;ern</span></a></p>
<p class="tabunter"><b>Abbildung 14.7   
    </b>Speicheradressierung der Variablen x und des Zeigers y</p>
<pre>y =&amp; x;</pre>
<p><a name="bild"></a><a href="#bild" onClick="OpenWin('bilder/14_08.gif','Abbildung',600,600)"><img border="0" src="bilderklein/klein14_08.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu Vergr&ouml;&szlig;ern</span></a></p>
<p class="tabunter"><b>Abbildung 14.8   
    </b>Zeiger y verweist jetzt auf die Adresse von Variable x</p>
<pre>*y = 10;</pre>
<p><a name="bild"></a><a href="#bild" onClick="OpenWin('bilder/14_09.gif','Abbildung',600,600)"><img border="0" src="bilderklein/klein14_09.gif" alt="Abbildung"><br><span class="tabunter">Hier klicken, um das Bild zu Vergr&ouml;&szlig;ern</span></a></p>
<p class="tabunter"><b>Abbildung 14.9   
    </b>Dereferenzierung der Variablen x</p>
<p>Somit gilt: Wenn Sie mit dem Indirektionsoperator den Wert einer Variablen auslesen k&ouml;nnen, dann kann damit auch die Variable ver&auml;ndert werden. Das Wichtigste ist, dass Sie verstehen, dass einem Zeiger kein Wert &uuml;bergeben wird, sondern eine Adresse (ich wiederhole mich), um anschlie&szlig;end mit dem Wert dieser Adresse zu arbeiten. Aber Achtung, nachstehendes Programm k&ouml;nnte b&ouml;se Folgen haben:</p>
<pre>/* ptr4.c */
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
int main(void) {
   int *y;
   *y=10;
   printf("Der Wert von *y ist %d\n", *y);
   return EXIT_SUCCESS;
}</pre>
<p>Dem Zeiger <span class="listing">y</span> wurde hier zuvor keine g&uuml;ltige Adresse zugewiesen. Dies bedeutet, dem Zeiger <span class="listing">y</span> steht beim Start des Programms eine Adresse zur Verf&uuml;gung, die durch ein zuf&auml;lliges Bitmuster vom Linker erzeugt wurde. Das Programm kann theoretisch sogar korrekt ablaufen. Irgendwann kann (wird) es jedoch ein vollkommen falsches Ergebnis zur&uuml;ckliefern. Auch k&ouml;nnte es sein, dass auf einen Speicherbereich zugegriffen wird, der bereits Daten beinhaltet. Dies k&ouml;nnte zu erheblichen Problemen bei der Programmausf&uuml;hrung bis hin zum Absturz f&uuml;hren.</p>
<p><a id="Xxx999433" name="Xxx999433"></a><a id="Xxx999434" name="Xxx999434"></a>Solche Fehler k&ouml;nnen Sie vermeiden, indem Sie einen nicht verwendeten Zeiger mit <span class="listing">NULL</span> initialisieren und vor der Verwendung des Zeigers eine &Uuml;berpr&uuml;fung auf <span class="listing">NULL</span> durchf&uuml;hren. Der Wert oder genauer der Zeiger <span class="listing">NULL</span> ist meistens eine Konstante, welche mit dem Wert 0 definiert ist:</p>
<pre>#define NULL (void *)0</pre>
<p>Einfach ausgedr&uuml;ckt handelt es sich bei diesem <span class="listing">NULL</span>-Zeiger um einen Ich-zeige-auf-keine-g&uuml;ltige-Adresse-Wert.</p>
<br><table width="100%" border="0" cellspacing="1" cellpadding="3">
<tr>
<td class="tabellentext" bgcolor="#000000">
<p class="BStandard"><b>Hinweis   </b>Auf <span class="listing">NULL</span> soll in einem sp&auml;teren Kapitel nochmals etwas genauer eingegangen werden. Allerdings empfehle ich Ihnen hierzu auch die deutsche FAQ von der de.comp.lang.c zu lesen. Hier wurde dem Thema <span class="listing">NULL</span>-Zeiger ein ganzes Kapitel gewidmet, da besonders Anf&auml;nger <span class="listing">NULL</span> zu sehr ver-</p>
</td>
</tr>
<tr>
<td class="tabellentext" bgcolor="#000000">
<p class="BStandard">gleichen – was aber nicht immer so sein muss. Theoretisch muss ein <span class="listing">NULL</span>-Zeiger n&auml;mlich kein Zeiger auf null sein, sondern kann auch eben nur als 0 definiert werden.</p>
</td>
</tr>
</table><br>
<p>Hier das Erw&auml;hnte in der Praxis:</p>
<pre>/* ptr5.c */
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
int main(void) {
   int *y=NULL;    /* Zeiger mit NULL initialisieren */
   if(y == NULL) {
      printf("Der Zeiger besitzt keine g&uuml;ltige Adresse\n");
      return EXIT_FAILURE;
   }
   else
      *y = 10;
   return EXIT_SUCCESS;
}</pre>
<p>Ein Tipp zu einer sichereren &Uuml;berpr&uuml;fung von:</p>
<pre>if(y == NULL)</pre>
<p>Es kann dabei schnell passieren, dass Sie statt einer &Uuml;berpr&uuml;fung auf <span class="listing">NULL</span> den Zeiger mit <span class="listing">NULL</span> initialisieren:</p>
<pre>if(y = NULL)  /* Fehler */</pre>
<p>Mit folgender &Uuml;berpr&uuml;fung kann Ihnen dieser Fehler nicht mehr unterlaufen:</p>
<pre>if(NULL == y)</pre>
<p>Denn sollten Sie <span class="listing">NULL</span> den Zeiger <span class="listing">y</span> zuweisen wollen, wird der Compiler das Programm nicht &uuml;bersetzen, da dies rein syntaktisch falsch ist.</p>
<p>Nat&uuml;rlich geht dies auch umgekehrt. Sie k&ouml;nnen einer normalen Variablen auch den Wert eines Zeigers &uuml;bergeben, auf den dieser zeigt. Beispiel:</p>
<pre>/* ptr6.c */
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
int main(void) {
   int *ptr;
   int var=10, tmp;
   /* ptr zeigt auf Adresse von var */
   ptr =&amp; var;
   /* Variable tmp bekommt den Wert, den ptr dereferenziert */
   tmp = *ptr;       /* tmp=10 */
   *ptr = 100;       /* Inhalt von var wird ver&auml;ndert var=100 */
   if(var &gt; 50)      /* Ist var gr&ouml;&szlig;er als 50 ... ? */
      var = tmp;       /* ... wieder den alten Wert */
   printf("var=%d\t*ptr=%d\n",var, *ptr); /* var=10   *ptr=10 */
   return EXIT_SUCCESS;
}</pre>
<p>Wichtig ist allerdings dabei, dass Sie den Indirektionsoperator verwenden. Denn dieser dereferenziert den Wert, auf den der Zeiger zeigt:</p>
<pre>tmp = *ptr;  /* tmp=10 */</pre>
<p>Sollten Sie den Indirektionsoperator vergessen, l&auml;sst sich das Programm ohnehin nicht &uuml;bersetzen, denn es w&uuml;rde ja versucht werden, der Variablen <span class="listing">tmp</span> eine Adresse zu &uuml;bergeben.</p>
<p>Hier ein schneller &Uuml;berblick zum Zugriff und zur Dereferenzierung von Zeigern:</p>
<pre>// Deklaration
int *ptr;
int var, var2;
// Initialisieren: ptr bekommt die Adresse von var
ptr =&amp; var;
// Dereferenzierung : var bekommt den Wert 100 zugewiesen
*ptr=100;
// var2 mit demselben Wert wie var initialisieren
var2 = *ptr;
*ptr+=100;     // Dereferenzierung: var wird um 100 erh&ouml;ht
(*ptr)++;      // Dereferenzierung: var hat jetzt den Wert 201
(*ptr)--;      // var hat wieder den Wert 200
ptr=&amp;var2;     // ptr zeigt auf var2
printf("%d", *ptr);    // gibt Wert von var2 aus
printf("%p", &amp;ptr);    // gibt Adresse von ptr aus
printf("%p", ptr);     // gibt Adresse von var2 aus</pre>
<p>Sicherlich sind Ihnen im Beispiel auch die Klammern bei den Zeilen</p>
<pre>(*ptr)++;      // Dereferenzierung: var hat jetzt den Wert 201
(*ptr)--;      // var hat wieder den Wert 200</pre>
<p>aufgefallen. Diese waren n&ouml;tig, da die Operatoren <span class="listing">++</span> und <span class="listing">--</span> einen h&ouml;heren Rang haben als der Indirektionsoperator (<span class="listing">*</span>) (siehe Anhang A »Rangfolge der Operatoren«). Ein Vergessen dieser Klammerung kann fatale Folgen haben.</p>
<a name="t31"></a><br><div align="center"><a href="#top"><img src="common/jupiters.gif" border="0" alt="Galileo Computing - Zum Seitenanfang" title="Galileo Computing - Zum Seitenanfang"></a></div><a name="t2t32"></a><h3 class="t3">14.2.1<a id="Xxx999463" name="Xxx999463"></a> Speichergr&ouml;&szlig;e von Zeiger<a id="RxxobKap014001040028BB1F02E1ED" name="RxxobKap014001040028BB1F02E1ED"></a>n 
      <img src="common/15x15leer.gif" width="15" height="15" border="0" alt="top"><a href="#t2t31"><img src="common/top.gif" width="15" height="15" border="0" alt="top"></a></h3>
<p>Ich komme bei der Speicherverwaltung zwar nochmals genauer zu diesem Thema zur&uuml;ck, aber es soll hier schon einmal kurz erw&auml;hnt werden. Die Gr&ouml;&szlig;e eines Zeigers ist nicht abh&auml;ngig vom Datentyp, auf den dieser verweist. Das ist ja auch schlie&szlig;lich nicht notwendig, denn Zeiger sollen ja keine Werte, sondern Adressen speichern. Und zur Speicherung von Adressen werden in der Regel zwei oder vier Bytes ben&ouml;tigt. Der Beweis:</p>
<pre>/* ptr7.c */
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
int main(void) {
   char   *v;
   int    *w;
   float  *x;
   double *y;
   void   *z;
   printf("%d\t %d\t %d\t %d\t %d \n",
      sizeof(v),sizeof(w), sizeof(x), sizeof(y), sizeof(z));
   return EXIT_SUCCESS;
}</pre>
</td>
</tr>
</table>
</td>
</tr>
<tr>
<td width="100%" class="start" colspan="1" height="22" align="center">
<table width="100%" border="0" cellspacing="0" cellpadding="0">
<tr>
<td width="25%"><a class="navnav" href="c_014_000.htm"> &lt;&lt; zur&uuml;ck</a></td>
<td width="49%">
<div align="center"><a class="navnav" href="#">&lt;top&gt;</a></div>
</td>
<td align="right" width="25%">
<div align="right"><a class="navnav" href="c_014_002.htm">vor &gt;&gt; </a></div>
</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</td>
<td width="10" valign="top">&nbsp;&nbsp;</td>
<td width="160" valign="top">
    <table border="0" cellpadding="0" cellspacing="0" width="160">
        <tr>
            <td>
                <table border="0" cellpadding="0" cellspacing="0" width="100%">
                    <tr>
                        <td class="tbl2" height="20" colspan="2">
                            &nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=opc" class="navs">
                            <strong>Zum Katalog</strong></a>
                        </td>
                    </tr>
                    <tr>
                        <td valign="top" class="tbl2" width="2">
                            <img src="common/leer.gif" border="0" height="1" width="1"></td>
                        <td valign="top">
                            <table cellspacing="3">
                                <tr>
                                    <td><a href="http://www.galileocomputing.de/899?GPP=opc">
                                        <img src="common/643_90px.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: C von A bis Z" title="Zum Katalog: C von A bis Z">
                                        <br /><strong>C von A bis Z</strong><br /><img src="common/pfeil_rechts5.gif" border="0" alt="">bestellen</a>
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
            </td>
        </tr>
        <tr>
            <td><img src="common/leer.gif" height="2" width="1" border="0" /></td>
        </tr>
        <tr>
            <td>
                <table border="0" cellpadding="0" cellspacing="0" width="100%">
                    <tr>
                        <td class="tbl2" height="20" colspan="2"><strong>&nbsp;Ihre Meinung?</strong></td>
                    </tr>
                    <tr>
                        <td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
                        <td valign="top">
                            <table cellspacing="3">
                                <tr>
                                    <td>Wie hat Ihnen das &lt;openbook&gt; gefallen?<br /><a href="mailto:stefan.krumbiegel@galileo-press.de?subject=Meinung%20zu%20C%20von%20A%20bis%20Z%20(openbook)"><img src="common/pfeil_rechts5.gif" border="0" alt="">Ihre Meinung</a>
                                    <br /><br /></td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
            </td>
        </tr>
        <tr>
            <td><img src="common/leer.gif" height="2" width="1" border="0" /></td>
        </tr>
        <tr>
            <td>
                <table border="0" cellpadding="0" cellspacing="0" width="100%">
                    <tr>
                        <td class="tbl2" height="20" colspan="2">&nbsp;<a href="http://www.galileocomputing.de/katalog/buecher/?GPP=opc" class="navs"><strong>Buchtipps</strong></a></td>
                    </tr>
                    <tr>
                        <td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
                        <a href="http://www.galileocomputing.de/1007?GPP=opc">
                        <img src="common/683_90px.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Shell-Programmierung" title="Zum Katalog: Shell-Programmierung"><br /><br /><br /><br /><br /><br /><br />&nbsp;Shell-Programmierung</a><br /><br /></td>
                    </tr>
                    <tr>
                        <td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
                        <a href="http://www.galileocomputing.de/1137?GPP=opc">
                        <img src="common/749_90px.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Linux-UNIX-Programmierung" title="Zum Katalog: Linux-UNIX-Programmierung"><br /><br /><br /><br /><br /><br /><br />&nbsp;Linux-UNIX-Programmierung</a><br /><br /></td>
                    </tr>
                    <tr>
                        <td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
                        <a href="http://www.galileocomputing.de/1004?GPP=opc">
                        <img src="common/644_90px.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: C/C++" title="Zum Katalog: C/C++"><br /><br /><br /><br /><br /><br /><br />&nbsp;C/C++</a><br /><br /></td>
                    </tr>
                    <tr>
                        <td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
                        <a href="http://www.galileocomputing.de/880?GPP=opc">
                        <img src="common/573_90px.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: UML 2.0" title="Zum Katalog: UML 2.0"><br /><br /><br /><br /><br /><br /><br />&nbsp;UML 2.0</a><br /><br /></td>
                    </tr>
                    <tr>
                        <td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
                        <a href="http://www.galileocomputing.de/967?GPP=opc">
                        <img src="common/626_90px.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Reguläre Ausdrücke" title="Zum Katalog: Reguläre Ausdrücke"><br /><br /><br /><br /><br /><br /><br />&nbsp;Reguläre Ausdrücke</a><br /><br /></td>
                    </tr>
                    <tr>
                        <td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td><td valign="top">
                        <a href="http://www.galileocomputing.de/941?GPP=opc">
                        <img src="common/677_90px.gif" width="105" height="90" border="0" align="left" hspace="4" vspace="8" alt="Zum Katalog: Linux" title="Zum Katalog: Linux"><br /><br /><br /><br /><br /><br /><br />&nbsp;Linux</a><br /><br /></td>
                    </tr>
                </table></td>
        </tr>
        <tr>
            <td><img src="common/leer.gif" height="2" width="1" border="0" /></td>
        </tr>
        <tr>
            <td>
                <table border="0" cellpadding="0" cellspacing="0" width="100%">
                    <tr>
                        <td class="tbl2" height="20" colspan="2"><strong>&nbsp;Shopping</strong></td>
                    </tr>
                    <tr>
                        <td valign="top" class="tbl2" width="2"><img src="common/leer.gif" border="0" height="1" width="1"></td>
                        <td valign="top">
                            <table cellspacing="3">
                                <tr>
                                    <td><b>Versandkostenfrei</b> bestellen in Deutschland und &Ouml;sterreich<br /><a href="http://www.galileocomputing.de/hilfe/Shop/?GPP=opc"><img src="common/pfeil_rechts5.gif" border="0" alt="Info">Info</a><br /><br /></td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
            </td>
        </tr>
    </table>
</td>
</tr>
</table>
<br /><br />
<hr width="70%" align="center"><br />
<div align="center">
<p class="standard"><b>Copyright © Galileo Press 2006</b><br>F&uuml;r Ihren privaten Gebrauch d&uuml;rfen Sie die Online-Version nat&uuml;rlich ausdrucken. Ansonsten unterliegt das &lt;openbook&gt; denselben Bestimmungen, wie die gebundene Ausgabe: Das Werk einschlie&szlig;lich aller seiner Teile ist urheberrechtlich gesch&uuml;tzt. Alle Rechte vorbehalten einschlie&szlig;lich der Vervielf&auml;ltigung, &Uuml;bersetzung, Mikroverfilmung sowie Einspeicherung und Verarbeitung in elektronischen Systemen.</p><br><a href="http://www.galileocomputing.de/">[Galileo Computing]</a><br><br>Galileo Press, Rheinwerkallee 4, 53227 Bonn, Tel.: 0228.42150.0, Fax 0228.42150.77, <a href="mailto:info@galileo-press.de">info@galileo-press.de</a></div><br><br></body>
</html>
